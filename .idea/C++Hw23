#include <iostream>
using namespace std;

template <typename T>
class Container {
private:
    struct Node {
        T data;
        Node* next;
        Node* prev;
        Node(const T& value) : data(value), next(nullptr), prev(nullptr) {}
    };

    Node* head;
    Node* tail;
    size_t count;

public:
    class Iterator {
    private:
        Node* current;
    public:
        Iterator(Node* node) : current(node) {}
        T& operator*() { return current->data; }
        Iterator& operator++() { current = current->next; return *this; }
        Iterator& operator--() { current = current->prev; return *this; }
        bool operator!=(const Iterator& other) const { return current != other.current; }
        bool operator==(const Iterator& other) const { return current == other.current; }
        Node* getNode() const { return current; }
    };

    Container() : head(nullptr), tail(nullptr), count(0) {}
    ~Container() { clear(); }

    void push_front(const T& value) {
        Node* node = new Node(value);
        node->next = head;
        if (head) head->prev = node;
        head = node;
        if (!tail) tail = head;
        count++;
    }

    void push_back(const T& value) {
        Node* node = new Node(value);
        node->prev = tail;
        if (tail) tail->next = node;
        tail = node;
        if (!head) head = tail;
        count++;
    }

    void pop_front() {
        if (!head) return;
        Node* temp = head;
        head = head->next;
        if (head) head->prev = nullptr;
        else tail = nullptr;
        delete temp;
        count--;
    }

    void pop_back() {
        if (!tail) return;
        Node* temp = tail;
        tail = tail->prev;
        if (tail) tail->next = nullptr;
        else head = nullptr;
        delete temp;
        count--;
    }

    void insert(Iterator pos, const T& value) {
        Node* current = pos.getNode();
        if (!current) { 
            push_back(value); 
            return; 
        }
        Node* node = new Node(value);
        node->next = current;
        node->prev = current->prev;
        if (current->prev) current->prev->next = node;
        else head = node;
        current->prev = node;
        count++;
    }

    T& front() { return head->data; }
    T& back() { return tail->data; }
    size_t size() const { return count; }

    Iterator begin() { return Iterator(head); }
    Iterator end() { return Iterator(nullptr); }

    void clear() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
        tail = nullptr;
        count = 0;
    }
};

int main() {
    Container<int> c;
    c.push_back(10);
    c.push_back(20);
    c.push_front(5);
    c.push_back(30);

    cout << "Front: " << c.front() << endl;
    cout << "Back: " << c.back() << endl;

    cout << "Size: " << c.size() << endl;

    cout << "Elements: ";
    for (auto it = c.begin(); it != c.end(); ++it) {
        cout << *it << " ";
    }
    cout << endl;

    c.pop_front();
    c.pop_back();

    cout << "After pop, size: " << c.size() << endl;
    for (auto it = c.begin(); it != c.end(); ++it) {
        cout << *it << " ";
    }
    cout << endl;

    auto it = c.begin();
    ++it; 
    c.insert(it, 99);

    cout << "After insert: ";
    for (auto i = c.begin(); i != c.end(); ++i) {
        cout << *i << " ";
    }
    cout << endl;

    return 0;
}
